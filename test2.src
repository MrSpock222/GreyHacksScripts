
if params.len != 1 or params[0] == "-h" or params[0] == "--help" then
	exit("<b>Usage: " + program_path.split("/")[-1] + " [ip_address]</b>")
end if

serverShell = connect_service(get_shell, "102.21.77.168", 22, "root", "haha")
metaxploitPath = "/root/metaxploit.so"
decipherPath = "/root/decipher"

metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then metaxploit = include_lib(current_path + "/metaxploit.so")
if not metaxploit then scp(serverShell, metaxploitPath, current_path, get_shell)
metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then metaxploit = include_lib(current_path + "/metaxploit.so")
if not metaxploit then exit("Error: Can't find metaxploit library in the /lib path or the current folder")

address = params[0]
isLanIp = is_lan_ip( address )

if isLanIp then
   router = get_router;
else
   router = get_router( address )
end if

if router == null then exit("nmap: ip address not found")
ports = null

if not isLanIp then
   ports = router.used_ports
else
   ports = router.device_ports(address)
end if

if ports == null then exit("nmap: ip address not found")
if typeof(ports) == "string" then exit(ports)

print("\n Select: \n 1: Ports \n 2: Router \n")
option = ""
inputOk = false
	while( not inputOk )
		option = user_input("Select attack: ").to_int
		if typeof(option) != "number" or (option < 1 or option > 2) then
			print("Invalid input. Type a valid number")
		else
			inputOk = true
		end if
	end while

	service_info = null

if option == 2 then
	net_session = metaxploit.net_use( address )
	if not net_session then exit("Error: can't connect to net session")
	service_info = "Kernel " + get_router.kernel_version
end if

if option == 1 then
      
	info = "PORT STATE SERVICE VERSION LAN"   
	print("\nStarting test v1.1 at " + current_date)
	print("Interesting ports on " + params[0] + "\n")
	if(ports.len == 0) then exit("Scan finished. No open ports.")

	pr = []
	infoPr = []
	portIndex = 1
	for port in ports
	service_info = router.port_info(port)
	infoPr.push(service_info)
	lan_ips = port.get_lan_ip
	port_status = "open"

	if(port.is_closed and not isLanIp) then
		port_status = "closed"
	end if
	info = info + "\n" + portIndex + " " + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
	pr.push(port.port_number)
	portIndex = portIndex + 1
	end for
	print("INDEX " + format_columns(info) + "\n")

	option = ""
	inputOk = false
		while( not inputOk )
			option = user_input("Select index: ").to_int
			if typeof(option) != "number" or (option < 1 or option > pr.len) then
				print("Invalid input. Type a valid number")
			else
				inputOk = true
			end if
		end while


	port = pr[option - 1]
	net_session = metaxploit.net_use(address, port)

	if not net_session then
		exit("Error: can't connect to net session")
	end if

	service_info = infoPr[option - 1]
end if

metaLib = net_session.dump_lib

//COM FOR TESTING


if service_info.split(" ")[0] == "students" or service_info.split(" ")[0] == "employees" or service_info.split(" ")[0] == "criminals" then 
	typeOfCode = "ssh " + service_info.split(" ")[1]
else 
	typeOfCode = service_info
end if

memory = null

filePath = "/root/codes.txt"
codesFile = serverShell.host_computer.File(filePath)

if codesFile == null then exit("codes.txt doesnt exist at path:\n " + filePath)
codeCont = codesFile.get_content.split(":")

for line in codeCont
	if line == "" then break
	le = line.split(" ")
	if le[0] + " " + le[1] != typeOfCode then continue
	memory = line[line.indexOf("[") : line.indexOf(":")]
	memory = memory.split("""")
	break
end for

if memory == null then
	memory = metaxploit.scan(metaLib)
	toWriteMem = " " + memory
	serverShell.host_computer.File(filePath).set_content(serverShell.host_computer.File(filePath).get_content + typeOfCode + toWriteMem + ":")
end if

//COM FOR TESTING

getPasswords = function()
shell = null
pass = null
passwords = []

for mem in memory
	address = metaxploit.scan_address(metaLib, mem).split("Unsafe check: ")

	for add in address
		if add == address[0] then continue
		value = add[add.indexOf("<b>") + 3 : add.indexOf("</b>")]
		value = value.replace("\n", "")
		result = metaLib.overflow(mem, value)
		
		if typeof(result) != "shell" and typeof(result) != "computer" then continue
		if typeof(result) == "shell" then shell = result
		if typeof(result) == "shell" then comp = result.host_computer
		if typeof(result) == "computer" then comp = result

		file = comp.File("/etc/passwd")
		if not file then continue
		cont = file.get_content
		if not cont then continue
		pass = cont.split("\n")
		for obj in pass
			passwords.push(pass)
		end for
	end for
end for

num = 1
users = []
testBool = false
for obj in passwords
	for i in obj
		for user in users
			if user == i then testBool = true
		end for

		if testBool then
			testBool = false
			continue
		end if

		// if i.split(":")[0] == "root" then
		// 	print("Password of root is: ")
		// 	exit(get_shell.launch(current_path + "/decipher", i))
		// end if

		users.push(i)
		if i != "" then print("\n" + num + ": " + i)
		num = num + 1
	end for
end for

if users.len < 1 then exit("Passwords couldnt get collected")

option = ""
inputOk = false
	while( not inputOk )
		option = user_input("Select user: ").to_int
		if typeof(option) != "number" or (option < 1 or option > num-1) then
			print("Invalid input. Type a valid number")
		else
			inputOk = true
		end if
	end while

print("<"+ users[option-1] +">")
dec = File(get_shell.host_computer, current_path + "/decipher")
if not dec then scp(serverShell, decipherPath, current_path, get_shell)
print(get_shell.launch(current_path + "/decipher", users[option-1]))


end function


getMails = function()
shell = null
pass = null
passwords = []

for mem in memory
	address = metaxploit.scan_address(metaLib, mem).split("Unsafe check: ")

	for add in address
		if add == address[0] then continue
		value = add[add.indexOf("<b>") + 3 : add.indexOf("</b>")]
		value = value.replace("\n", "")
		result = metaLib.overflow(mem, value)
		print("mem: " + mem + "\n" + "value: " + value)
		
		if typeof(result) != "shell" and typeof(result) != "computer" then continue
		if typeof(result) == "shell" then shell = result
		if typeof(result) == "shell" then comp = result.host_computer
		if typeof(result) == "computer" then comp = result

		
		
		homeDir = comp.File("/home")
    	if homeDir and homeDir.get_folders then 
		userFolders = homeDir.get_folders()       
        for userFolder in userFolders
            mailFilePath = userFolder.path + "/Config/Mail.txt"
            mailFile = comp.File(mailFilePath)
			if not mailFile then continue
			cont = mailFile.get_content
			if not cont then continue

			passwords.push(cont)
		end for
		end if
	end for
end for


num = 1
users = []
testBool = false
for i in passwords

	for user in users
		if user == i then testBool = true
	end for

	if testBool then
		testBool = false
		continue
	end if

	users.push(i)
	if i != "" then print("\n" + num + ": " + i)
	num = num + 1
end for



if passwords.len < 1 then exit("Emails couldnt get collected")

option = ""
inputOk = false
	while( not inputOk )
		option = user_input("Select user: ").to_int
		if typeof(option) != "number" or (option < 1 or option > num -1) then
			print("Invalid input. Type a valid number")
		else
			inputOk = true
		end if
	end while


print("<"+ passwords[option-1] +">")
dec = File(get_shell.host_computer, current_path + "/decipher")
if not dec then scp(serverShell, decipherPath, current_path, get_shell)
print(get_shell.launch(current_path + "/decipher", passwords[option-1]))


end function

getAccsess = function()
shell = null
pass = null

for mem in memory
	address = metaxploit.scan_address(metaLib, mem).split("Unsafe check: ")

	for add in address
		
		if add == address[0] then continue
		value = add[add.indexOf("<b>") + 3 : add.indexOf("</b>")]
		value = value.replace("\n", "")
		result = metaLib.overflow(mem, value, "haha")
		print("mem: " + mem + "\n" + "value: " + value)
		
		if typeof(result) != "shell" then continue
		if typeof(result) == "shell" then shell = result
		if shell then shell.start_terminal

	end for
end for



end function

print("\n 1: getPasswords \n 2: getMails \n 3: getAccsess \n")
option = ""
inputOk = false
	while( not inputOk )
		option = user_input("Select attack: ").to_int
		if typeof(option) != "number" or (option < 1 or option > 3) then
			print("Invalid input. Type a valid number")
		else
			inputOk = true
		end if
	end while

if option == 1 then getPasswords()
if option == 2 then getMails()
if option == 3 then getAccsess()