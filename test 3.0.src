__version = "3.0"
__name = "test"

/////////////////////////////////////////////////////////CONFIG START/////////////////////////////////////////////////////////
password = ""
codesFileName = "codes.db" //
codesPath = "/home/guest" //Default codes path if kit does not exist
/////////////////////////////////////////////////////////CONFIG END/////////////////////////////////////////////////////////

Target = {}
Target.ports = []
Target.info = []

Current = {}
Current.shell = get_shell
Current.computer = Current.shell.host_computer
Current.user = active_user
Current.metaxploit = null
Current.crypt = null

DEBUG = false

Shell = {}
Shell.shell = null
Shell.localIP = ""
Shell.publicIP = ""
Shell.setName = function(name)
	self.name = name
end function
Shell.create = function(shell, publicIP, localIP, name = "Shell")
	x = new Shell
	x.shell = shell
	x.localIP = localIP
	x.publicIP = publicIP
	x.name = name
	return x
end function

if not get_custom_object.hasIndex("Shells") then get_custom_object["Shells"] = [Shell.create(Current.shell,Current.computer.public_ip,Current.computer.local_ip)]
Shells = @get_custom_object["Shells"]

startShellLocalIP = Current.computer.local_ip
startShellPublicIP = Current.computer.public_ip
isStartShell = function(shell)
	localIP = shell.host_computer.local_ip
	publicIP = shell.host_computer.public_ip
	if localIP == startShellLocalIP and publicIP == startShellPublicIP then return true
	return false
end function

import_code("/root/src/core.src")//override=core.src

Menu = {}
Menu.init = function()
	if not params then 
		if password != "" then
			while(true)
				if user_input("<size=80%>" + "<color=red>TEST" + "</size>" + "<pos=0%><voffset=-1.2em>" + "Password: " + "</color><size=0%>",true).trim == password then break
				clear_screen
				print("<color=red><b>Wrong password</b>")
			end while
		end if
	else if params and params[0] != password then 
		exit("<color=red>Wrong password")
	end if

	clear_screen()
	print "\n<align=""center"">Hacking Tool" + char(169) + "</align>\n<align=""center""><size=50px>TEST</size></align>\n<align=""center"">" + "by" + " Notschge</align>\n"
	print "Initializing..."

	UpdateLibs = function
		if not program_path.matches("kit") then MainFuncsForCode.setHackshopIP

		Current.metaxploit = MainFuncsForCode.incLib("metaxploit.so")
		Current.crypt = MainFuncsForCode.incLib("crypto.so")
		if not Current.metaxploit then Current.metaxploit = include_lib("/lib/metaxploit.so")//Just bc greybel doesnt support apt client yet
		if not Current.crypt then Current.crypt = include_lib("/lib/crypto.so")//Just bc greybel doesnt support apt client yet
		if not get_custom_object.hasIndex("mx0") then get_custom_object["mx0"] = Current.metaxploit
		if not get_custom_object.hasIndex("mxc") then get_custom_object["mxc"] = Current.crypt
	end function

	if Current.computer.is_network_active then UpdateLibs

	if MainFuncsForCode.Config.Get("startWithClearConsole") == 1 then clear_screen
	
	mainFuncs = {}
	mainFuncs.scan = {}
	mainFuncs.scan.use = "<color=orange>scan</color> [IPADDRESS]" + char(10) +
	"<color=orange>scan</color> scans the last scanned ip address" + char(10) +
	"<color=orange>scan rnd</color> scans a random ip address " + char(10) +
	"<color=orange>scan -r</color> scans the local ip address"
	mainFuncs.scan.description = "Scan for ports at desired IP"
	mainFuncs.scan.run = function(x)
		if not x and not Target.info then return print(mainFuncs.scan.use)
		useDB = MainFuncsForCode.Config.Get("useDB")
		clear_screen

		if x and is_valid_ip(x[0]) then MainFuncsForCode.buildPortMap(x[0])
		if x and x[0] == "-r" then MainFuncsForCode.buildPortMap(get_router.public_ip)
		if x and x[0] == "rnd" then MainFuncsForCode.buildPortMap(MainFuncsForCode.rndIp)

		text = "<color=blue>========================================" + char(10) +
		"Choose port>"
		option = MainFuncsForCode.choseInput(Target.ports,Target.info.join(char(10)) + char(10) + text)
		if option == -1 then return
		if option != 0 and Target.ports[option].is_closed then mainFuncs.scan.run

		if typeof(Target.ports[option]) == "number" then port = Target.ports[option] else port = Target.ports[option].port_number
		net_session = Current.metaxploit.net_use(Target.info[0].split(" ")[2], port)
		if not net_session then return print("Error: can't connect to net session")
		metaLib = net_session.dump_lib

		if port == 0 then 
			lanInject = MainFuncsForCode.getLanInject(Target.info[0].split(" ")[2])
			isrouter = true 
		else 
			lanInject = null
			isrouter = false
		end if

		MainFuncsForCode.memCodeSelection(metaLib, isrouter, useDB,lanInject)
		mainFuncs.scan.run

	end function

	mainFuncs.cleanup = {}
	mainFuncs.cleanup.use = "Usage: cleanup"
	mainFuncs.cleanup.description = "Deletes all files in the folder\nIf the current script is located in kit only /kit will be deleted"
	mainFuncs.cleanup.run = function(x)
		colorPrefixGood = "<color=green>"
		colorPrefixBad = "<color=#FF0000df>"
		emptyRow = "\n" + colorPrefixBad + "<b>-------------------------------------------------------</b>\n"
		withLogClearText = colorPrefixGood + "<b><size=200%>Cleanup completed!</size></b>"

		if not isStartShell(Current.shell) then return print("<color=red>Only possible at host shell\n<color=orange>Note: If the IP is white highlighted")
		currentFolder = Current.computer.File(current_path)
		currentFolderPath = currentFolder.path
		clear_screen()

		if currentFolderPath.split("/")[-1] == "kit" then
			fileName = currentFolder.name
			result = currentFolder.delete
			if result == "" then print(colorPrefixGood + fileName + " got successfully deleted.")
			if result != "" then print(colorPrefixBad + fileName + " " + result)
		else
			for file in currentFolder.get_files
				fileName = file.name
				result = file.delete
				if result == "" then print(colorPrefixGood + fileName + " got successfully deleted.")
				if result != "" then print(colorPrefixBad + fileName + " " + result)
			end for
		end if


		print(emptyRow + withLogClearText + emptyRow)

		mainFuncs.clearlog.run

	end function

	mainFuncs.clearlog = {}
	mainFuncs.clearlog.use = "Usage: clearlog"
	mainFuncs.clearlog.description = "Corrupts log file"
	mainFuncs.clearlog.run = function(x)

		info = "<size=200%>Log cleared</size>"
		emptyRow = "\n<color=#00BBFF><b>-------------------------------------------------------</b>\n"
		file = Current.computer.File("/etc/fstab")

		if file then
			logfile = file.copy("/etc", "log")
			wait(0.02)
			logfile = Current.computer.File("/etc/log")

			if logfile then
				logfile.set_content("deleted")
				logfile.move("/var", "system.log")
			else
				return print("Permissions are lacking to clear logs :()")
			end if
			
			
		else
			return print("Permissions are lacking to clear logs :()")
		end if
		print(emptyRow + info + emptyRow)
	end function

	mainFuncs.sudo = {}
	mainFuncs.sudo.use = "Usage: sudo [user]"
	mainFuncs.sudo.description = "Sudo switches user"
	mainFuncs.sudo.run = function(x)
		if not isStartShell(Current.shell) then return print("<color=red>Only possible at host shell\n<color=orange>Note: If the IP is white highlighted")
		file = ""
		username = x[0]
		if username == "-s" then username = "root"
		usershell = get_shell(username,user_input("Password: ",true,false))
		if not usershell then return print("<color=red>Failed!")
		Current.shell = usershell
		Current.computer = Current.shell.host_computer
		launch(usershell, program_path, password)
	end function

	mainFuncs.lib = {}
	mainFuncs.lib.use = "Usage: lib"
	mainFuncs.lib.description = "Scan the desired libary for vulnerabilities.\nUse [all] to scan all libs"
	mainFuncs.lib.run = function(x)
		useDB = MainFuncsForCode.Config.Get("useDB")
		if not isStartShell(Current.shell) then return print("<color=red>Only possible at host shell\n<color=orange>Note: If the IP is white highlighted")

		libs = []
		lipPaths = []

		for lib in MainFuncsForCode.getFiles(Current.shell).get("lib").get_files
			if not lib.name.matches(".so") then continue
			libs.push(lib.name)
			lipPaths.push(lib.path)
		end for

		ress = MainFuncsForCode.chosesmth(libs, "Choose a lib")
		if ress == -1 then return

		metaLib = Current.metaxploit.load(lipPaths[ress])
		if not metaLib then 
			if not Current.computer.File(lipPaths[ress]).has_permission("r") then return print("Could not scan " + libs[ress] + "\n<color=red>Reason: No permission!")
			return print("Could not scan " + libs[ress] + "\n<color=red>Reason: Try updating metaxploit!")
		end if
		print("Scanning: " + metaLib.lib_name + " " + metaLib.version)

		if Current.computer.get_name.matches("router") then 
			lanInject = MainFuncsForCode.getLanInject(get_router.local_ip)
			isrouter = true 
		else 
			lanInject = null
			isrouter = false
		end if

		MainFuncsForCode.memCodeSelection(metaLib, isrouter, useDB,lanInject)
		mainFuncs.lib.run

	end function

	mainFuncs.kit = {}
	mainFuncs.kit.use = "Usage: kit"
	mainFuncs.kit.description = "Create kit for local use on target system"
	mainFuncs.kit.run = function(x)
		MainFuncsForCode.kit("install", codesFileName)
	end function

	mainFuncs.tree = {}
	mainFuncs.tree.use = "Usage: tree"
	mainFuncs.tree.description = "Shows all folders and files plus permissions"
	mainFuncs.tree.run = function(x)
		clear_screen
		output = ""
		print("<color=#96B800>========================")
		for f in MainFuncsForCode.getFiles(Current.shell)
			if f.is_folder then output = output + "<color=#AD0C00>" + f.permissions + " <color=blue>" + f.name + "\n"
			if not f.is_folder then output = output + "<color=#AD0C00>" + f.permissions + "<color=#B18700>" + "  =>" + f.name + "\n"
		end for
		print(output)
		print("<color=#96B800>========================")
	end function

	mainFuncs.shell = {}
	mainFuncs.shell.use = "Usage: shell [show/s/rn]"
	mainFuncs.shell.description = "Use [show] to show the log of shells\nUse [s] + index to connect to desired shell\nUse [rn] to rename a shell"
	mainFuncs.shell.run = function(x)
		if x == null then return print(mainFuncs.shell.use)

		PrintAllShells = function
			for e in range(0, Shells.len - 1)
				print("<color=#00CCFF>--------------------------")
				if e == 0 then print("StartShell")
				if e != 0 then print(Shells[e].name + " " + e)
				suffix = ""
				if Shells[e].localIP == Current.computer.local_ip and Shells[e].publicIP == Current.computer.public_ip then suffix = " <color=#8F7900>[Current]"
				print("User: " + MainFuncsForCode.checkuser(Shells[e].shell) + suffix)
				print("Public IP: " + Shells[e].publicIP)
				print("Local IP: " + Shells[e].localIP)
			end for
			print("<color=#00CCFF>--------------------------")
		end function

		if x[0] == "show" then
			PrintAllShells()
		end if

		if x[0] == "cleanup" then
			colorPrefixGood = "<color=green>"
			colorPrefixBad = "<color=#FF0000df>"
			emptyRow = "\n" + colorPrefixBad + "<b>-------------------------------------------------------</b>\n"
			withLogClearText = colorPrefixGood + "<b><size=200%>Cleanup completed!</size></b>"
	
			if Shells.len - 1 == 0 then return print("There are no shells to clean")

			for e in range(1,Shells.len - 1)	
				print(Shells[e].name + e + ":")
				shell = Shells[e].shell
				path = null
				for file in MainFuncsForCode.getFiles(shell)
					if file.name == "kit" then path = file.path
				end for

				if not path and DEBUG then
					print("No kit found")
				else if path then 
					kit = shell.host_computer.File(path)
					result = kit.delete

					if not kit then
						if DEBUG then return print(Shells[e].name + e + ": " + colorPrefixGood + kit.name + " not found.")
						return
					end if

					if result == "" then print(colorPrefixGood + "Kit got successfully deleted.")
					if result != "" then print(colorPrefixBad + "Kit could not be deleted " + result)

				end if

				info = "<size=200%>Log cleared</size>"
				emptyRow = "\n<color=#00BBFF><b>-------------------------------------------------------</b>\n"
				file = Shells[e].shell.host_computer.File("/etc/fstab")

				if file then
					logfile = file.copy("/etc", "log")
					wait(0.02)
					logfile = Shells[e].shell.host_computer.File("/etc/log")

					if logfile then
						logfile.set_content("deleted")
						logfile.move("/var", "system.log")
					else
						return print("Permissions are lacking to clear logs :()")
					end if
					
					
				else
					return print("Permissions are lacking to clear logs :()")
				end if
			end for

			print(emptyRow + withLogClearText + emptyRow)

		end if

		if x[0] == "s" then
			if x.len < 2 then return PrintAllShells
			if x[1].to_int < Shells.len and x[1].to_int >= 0 then

				print("<color=#00B7FF>--------------------------------------")
				print("Routing to " + Shells[x[1].to_int].name + " " + x[1] + "\nUser: " + MainFuncsForCode.checkuser(Shells[x[1].to_int].shell) + "\nPublic IP: " +  Shells[x[1].to_int].publicIP + "\nLocal IP: " + Shells[x[1].to_int].localIP)
				print("<color=#00B7FF>--------------------------------------")

				shell = Shells[x[1].to_int].shell
				MainFuncsForCode.handle.shell(shell)
			else 
				print("Shell " + x[1] + " does not exist")
			end if
		end if

		if x[0] == "rn" then 
			PrintAllShells()
			if Shells.len <= 1 then return print("There are no shells to rename.")
			while (true)
				num = user_input("<size=80%>" + "<color=red>TEST " + "</color>" + "</size>" + "<pos=0%><voffset=-1.2em>" + "[" + Current.user + "@" + Current.computer.get_name  + "] </color>sel.:").trim
				if num.trim == "" then continue
				if num.to_int < Shells.len and num.to_int >= 1 then 
					while (true)
						userChoice = user_input("<size=80%>" + "<color=red>TEST " + "</color>" + "</size>" + "<pos=0%><voffset=-1.2em>" + "[" + Current.user + "@" + Current.computer.get_name  + "] </color>name.:").trim
						if userChoice.trim == "" then continue
						Shells[num.to_int].setName(userChoice)
						break
					end while
				end if
				break
			end while

			print("Shell " + num + " renamed to " + userChoice)
		end if
	end function

	mainFuncs.update = {}
	mainFuncs.update.use = "Usage: update"
	mainFuncs.update.description = "Updates apt client and upgrades if needed"
	mainFuncs.update.run = function(x)
		Current.metaxploit = MainFuncsForCode.incLib("metaxploit.so")
		Current.crypt = MainFuncsForCode.incLib("crypto.so")
	end function

	mainFuncs.lock = {}
	mainFuncs.lock.use = "Usage: lock"
	mainFuncs.lock.description = "Locks all files and executeables except Terminal.exe and the sudo cmd\nUse [-] to unlock all\nUse [all] to lock everything for every user"
	mainFuncs.lock.run = function(x)

		if x then
			if x[0] == "-" then 
				if not Current.computer.File("/").has_permission("w") then return print("<color=red>You have no permission to do that!")
				allFiles = MainFuncsForCode.getFiles(Current.shell)
				for file in allFiles
					file.chmod("u+wrx")
					file.chmod("o+wrx")
					file.chmod("g+wrx")
				end for
				print("<color=yellow>=================================================")
				print("<size=200%><color=blue>System unlocked!")
				print("<color=yellow>=================================================")
				return
			else if x[0] == "all" then


				while true
					userinput = user_input("This command will lock all users\nDo you want to proceed y/n\n", false, true).trim
					if userinput == "y" or userinput == "Y" then break
					return print("Process interrupted.")
				end while

				while true
					userinput = user_input("Enter password: ", true).trim
					if userinput == "" and password != "" then return print("Process interrupted.")
					if userinput != password and userinput != "" then continue
					break
				end while

				if not Current.computer.File("/").has_permission("w") then return print("<color=red>You have no permission to do that!")
				allFiles = MainFuncsForCode.getFiles(Current.shell)
				for file in allFiles
					file.chmod("u-wrx")
					file.chmod("o-wrx")
					file.chmod("g-wrx")
				end for
		
				print("<color=yellow>=================================================")
				print("<size=200%><color=blue>System locked!")
				print("<color=yellow>=================================================")
			end if
		else
			if not Current.computer.File("/").has_permission("w") then return print("<color=red>You have no permission to do that!")
			allFiles = MainFuncsForCode.getFiles(Current.shell)
			for file in allFiles
				if file.name == "passwd" or file.name == "Mail.txt" then 
					file.delete
					print(file.name + " got deleted")
					continue
				end if
				if file.name.matches("sudo") or file.name.matches("Terminal.exe") or file.name.matches("Terminal") then continue
				file.chmod("o-wrx")
				file.chmod("g-wrx")
			end for
	
			print("<color=yellow>=================================================")
			print("<size=200%><color=blue>System locked!")
			print("<color=yellow>=================================================")
		end if



	end function

	mainFuncs.q = {}
	mainFuncs.q.use = "Usage: q"
	mainFuncs.q.description = "Exits out of test script"
	mainFuncs.q.run = function(x)
		while true
			userinput = user_input("Sure you want to quit? [y/n]\n", false, true).trim.lower
			if userinput == "y" then 
				clear_screen
				exit("Shutting down...")
			end if
			if userinput == "n" then break
		end while
	end function

	mainFuncs.ps = {}
	mainFuncs.ps.use = "Usage: ps"
	mainFuncs.ps.description = "Displays running processes"
	mainFuncs.ps.run = function(x)
		allProcs = Current.computer.show_procs
		allProcs = allProcs.replace("ps", "<color=red>r<color=orange>shell</color>")

		print(format_columns(allProcs))
	end function

	mainFuncs.kill = {}
	mainFuncs.kill.use = "Usage: kill <color=orange>PID</color>"
	mainFuncs.kill.description = "Kills running process "
	mainFuncs.kill.run = function(x)
		if not x then return print("<color=red>Invalid PID\nUse: kill <color=orange>PID</color> ")
		PID = x[0].to_int
		if typeof(PID) != "number" then return print("<color=red>The PID must be a number")
		
		output = Current.computer.close_program(PID)
		if output == true then return print("Process " + PID + " closed");
		if output then return print("<color=red>" + output)
		print("<color=red>Process " + "<color=orange>" + PID + "</color> not found")
	end function

	mainFuncs.rshell = {}
	mainFuncs.rshell.use = "Usage: rshell"
	mainFuncs.rshell.description = "Runs rshell interface"
	mainFuncs.rshell.run = function(x)

		if not x then
			shells = Current.metaxploit.rshell_server

			if typeof(shells) == "string" then
				print(shells)
				return
			end if

			if shells.len < 1 then 
				print("There are no shells connected!")
				return
			end if

			option = 0
			while (option < 1 or option > shells.len)
				print(shells.len + " shell(s) connected!\n<b>Select a shell to start a terminal:</b>")
				for i in range(0, shells.len - 1)
					print("\n<b>Shell (" + (i + 1) + ")</b>\nPublic IP: " + shells[i].host_computer.public_ip + "\nLocal IP: " + shells[i].host_computer.local_ip)
				end for
				print("-----------")
				option = user_input("Select shell>").to_int
				if typeof(option) != "number" then 
					if option.lower == "q" then break
				end if
			end while

			print("Starting shell #" + option)
			shell = shells[option - 1]
			return MainFuncsForCode.handle.shell(shell)
		end if

		KillRshell = function(shell)
			killedSomething = false
			allProcs = shell.host_computer.show_procs.split(char(10))[1:]
			for item in allProcs
				if item.split(" ")[4] == "ps" or item.split(" ")[4] == "rshell_client" then 
					killedSomething = true
					res = shell.host_computer.close_program(item.split(" ")[1].to_int)
					if res == true then
						print("<color=red>r<color=orange>shell" + "</color>" + "[" + item.split(" ")[1] + "]" + " Killed")
					else
						print("<color=red>" + res)
						continue
					end if
				end if
			end for
			if not killedSomething then print("There are no rshell services running on this system")
		end function

		if x[0] == "kill" then KillRshell(Current.shell)

		if x[0] == "-l" or x[0] == "clear" then
			for shell in Current.metaxploit.rshell_server
				print("<color=blue>--------------------------------------")
				print("<color=blue>[" + shell.host_computer.public_ip + ":" + shell.host_computer.local_ip + "]")
				KillRshell(shell)
			end for
		end if

		if x[0] == "listen" then
			default = 2
			waitSeconds = default
			
			if x.len == 2 then
				waitSeconds = x[1].to_int
				if typeof(waitSeconds) != "number" or (waitSeconds < 0.01 or waitSeconds > 300) then waitSeconds = default
			end if


			startShellCount = Current.metaxploit.rshell_server.len
			print("Refreshing every " + round(waitSeconds,2) + "s")
			print("Listening for connection...")

			while true
				currShells = Current.metaxploit.rshell_server
				if currShells.len != startShellCount then
					MainFuncsForCode.handle.shell(currShells[currShells.len - 1])
					break
				end if
				wait(waitSeconds)
			end while	

		end if

		if x[0] == "-i" or x[0] == "install" then
			librs = MainFuncsForCode.incLib("librshell.so")
			if not librs then return("librshell.so not found")

			out = librs.install_service
			if not out then
				print(out)
				return
			end if
			print("<b>Type 'Browser.exe " + get_router.local_ip + ":8080' to access the router configuration to make sure the service it's accessible</b>")
		end if

		if x[0] == "start" then
			librs = MainFuncsForCode.incLib("librshell.so")
			if not librs then return("librshell.so not found")

			if not librs then 
				print("librshell.so is not installed\nUse rshell [-i/install] to install Service")
				return
			end if

			rc = librs.start_service

			if typeof(rc) == "string" then return print("Rshell service is already started") else print("Rshell service successfully started")
			if DEBUG then print(rc)
		end if

		if x[0] == "stop" then
			librs = MainFuncsForCode.incLib("librshell.so")
			if not librs then return("librshell.so not found")

			if not librs then 
				print("librshell.so is not installed\nUse rshell [-i/install] to install Service")
				return
			end if

			rc = librs.stop_service

			if typeof(rc) == "string" then return print("Rshell service is already stopped") else print("Rshell service successfully stopped")
			if DEBUG then print(rc)
		end if

		if x[0] == "run" then
			if not isStartShell(Current.shell) then return print("<color=red>Only possible at host shell\n<color=orange>Note: If the IP is white highlighted")
			
			cfgPort = MainFuncsForCode.Config.Get("rshellPort")
			if cfgPort then input = cfgPort else input = user_input("Choose a Port:", false, false).trim.to_int
			
			print("<color=blue>=================</color>")
			if typeof(input) != "number" then 
				if input != "" then print("<color=red>Wrong Syntax</color>")
				print("<color=orange>Port defaulted to 1000</color>")
				input = 1000
			else
				print("Port: " + input)
			end if


			res = Current.metaxploit.rshell_client(Shells[0].publicIP, input, "ps")
			if res then print("Success") else print("Failed")
			print("<color=blue>=================</color>")
		end if



	end function
	
	mainFuncs.fx = {}
	mainFuncs.fx.use = "Usage: fx"
	mainFuncs.fx.description = "Runs fileexplorer"
	mainFuncs.fx.run = function(x)
		MainFuncsForCode.fileExplorer(Current.shell)
	end function

	mainFuncs.rnd = {}
	mainFuncs.rnd.use = "Usage: rnd"
	mainFuncs.rnd.description = "Get a random IP"
	mainFuncs.rnd.run = function(x)
		print(MainFuncsForCode.rndIp)
	end function

	mainFuncs.pw = {}
	mainFuncs.pw.use = "Usage: pw"
	mainFuncs.pw.description = "Get passwords from current os\nMight not show all pw on lower priviliges then root"
	mainFuncs.pw.run = function(x)
	 	clear_screen
		MainFuncsForCode.showAllPasswords([Current.computer.File("/")])
	end function

	mainFuncs.clear = {}
	mainFuncs.clear.use = "Usage: clear"
	mainFuncs.clear.description = "Clears screen"
	mainFuncs.clear.run = function(x)
	 	clear_screen
	end function

	mainFuncs.dec = {}
	mainFuncs.dec.use = "Usage: dec [user@password]" + char(10) +
	"dec listen"
	mainFuncs.dec.description = "Deciphers password"
	mainFuncs.dec.run = function(x)
		if not x then return print(mainFuncs.dec.use)
		if x[0].len > 33 then return MainFuncsForCode.dec.decipher(x[0])
		if x[0] == "listen" then MainFuncsForCode.dec.listenForSend
	end function

	mainFuncs.wlan = {}
	mainFuncs.wlan.use = "Usage: wlan"
	mainFuncs.wlan.description = "Connects to wlan"
	mainFuncs.wlan.run = function(x)
		if x then return print(mainFuncs.getwlan.use)
		MainFuncsForCode.connectToWlan
	end function

	// mainFuncs.mail = {}
	// mainFuncs.mail.use = "Usage: mail"
	// mainFuncs.mail.description = "Connects mail"
	// mainFuncs.mail.run = function(x)
	// 	if not x then return print(mainFuncs.mail.use)
	// 	MainFuncsForCode.showMails
	// end function

	mainFuncs.cfg = {}
	mainFuncs.cfg.use = "Use: cfg"
	mainFuncs.cfg.description = "Opens config menu"
	mainFuncs.cfg.run = function(x)
		MainFuncsForCode.Config.Manager
	end function

	mainFuncs.findlib = {}
	mainFuncs.findlib.use = "Use: findlib [libname] [version]"
	mainFuncs.findlib.description = "Searching ips for lib"
	mainFuncs.findlib.run = function(x)
		if not x or (x and not x.len == 2) or (x and x.len == 2 and x[1].len != 5) then return print(mainFuncs.findlib.use)
		print(MainFuncsForCode.findLib(x[0] + ".so",x[1]))
	end function

	// mainFuncs.apt = {}
	// mainFuncs.apt.use = "Use: apt"
	// mainFuncs.apt.description = "same as apt-get"
	// mainFuncs.apt.run = function(x)

	// end function

	x = new self
	x.cmd = mainFuncs
	return x

end function

Menu.help = function
	lineColor = "<color=#004A9F>"
	print(lineColor + "------------------------------------------------------</color>")
	for each in self.cmd.indexes
		if self.cmd[each].hasIndex("run") and self.cmd[each].hasIndex("description") then print(self.cmd[each].use + "\n" + self.cmd[each].description + "\n" + lineColor + "------------------------------------------------------</color>")
	end for
end function

Menu.CommandHandler = function(command)
	command = command.split(" ")

	for a in range(command.len - 1)
		if command[a] == "" then command.remove(command.indexOf(""))
	end for

	if self.cmd.hasIndex(command[0].lower) then 
		f = @self.cmd[command[0].lower].run
		if command.len > 1 then f(command[1:]) else f
	else
		print("<color=red>Invalid command!")
	end if

end function

Menu.run = function
	while (true)
		if get_custom_object.hasIndex("exit") then exit("Shutting down...")
		if not get_shell.host_computer.is_network_active then ipText = "<color=red><b>OFFLINE</b></color>" else ipText = Current.computer.public_ip + ":" + Current.computer.local_ip
	
		color = "<color=red>"
		if isStartShell(Current.shell) then color = "<color=white>"

		userChoice = user_input("<size=80%>" + color + "TEST" + "[" + ipText + "]" + "</color>" + "</size>" + "<pos=0%><voffset=-1.2em>" + Current.user + "@" + Current.computer.get_name  + ":" + program_path + "> </color>").trim
		if userChoice == "" then continue
		if userChoice == "-h" or userChoice == "help" then
			self.help
			continue
		end if
		self.CommandHandler(userChoice)
	end while
end function

menu = Menu.init
menu.run