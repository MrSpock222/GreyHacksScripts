
if params.len != 1 or params[0] == "-h" or params[0] == "--help" then
	exit("<b>Usage: " + program_path.split("/")[-1] + " [ip_address]</b>")
end if

useApt = true;
customObj = get_custom_object()

aptClient = include_lib("/lib/aptclient.so")
if not aptClient then aptClient = include_lib(current_path + "/aptclient.so")
if not aptClient then exit("There is no aptclient.so at " + current_path + " or /lib!")

repoIP = "128.160.180.228"
aptClient.add_repo(repoIP)
aptClient.update()

codesFileName = "codes.txt"
codesPath = "/root"

if params[0] == "getLan" then
	result = aptClient.install("ScanLan.exe", current_path)
	if result == 1 then 
		print("Installation of ScanLan.exe was succsessful!")
		get_shell.launch(current_path + "/ScanLan.exe")
	else
		exit("Installation of ScanLan.exe failed!")
	end if
end if

serverShell = null
if useApt then serverShell = get_shell.connect_service(repoIP, 22, "root", "noah666", "ssh")
if typeof(serverShell) != "shell" and useApt then exit("useApt is True but shell couldnt be obtained!")

dec = File(get_shell.host_computer, current_path + "/decipher")
if useApt and not dec then aptClient.install("decipher", current_path)

metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then metaxploit = include_lib(current_path + "/metaxploit.so")
if not metaxploit and useApt then aptClient.install("metaxploit.so", current_path)
metaxploit = include_lib(current_path + "/metaxploit.so")
if not metaxploit then exit("Error: Can't find metaxploit library in the /lib path or the current folder")

getMemCodes = function(typeOfCode, net_session)
	metaLib = net_session.dump_lib
	memory = null

	if useApt then
		if serverShell.host_computer.File(codesPath + "/" + codesFileName) == null then 
			hostComputer = serverShell.host_computer
			createResult = hostComputer.touch(codesPath, codesFileName)
			if typeof(createResult) == "number" then
				print("[SERVER] File got created at given path " + path)
			else if typeof(createResult) == "string" then
				print("[SERVER] " + createResult)
			end if
		end if
	else
		if get_shell.host_computer.File(current_path + "/" + codesFileName) == null then 
			hostComputer = get_shell.host_computer
			createResult = hostComputer.touch(current_path, codesFileName)
			if typeof(createResult) == "number" then
				print("[LOCAL] File got created at given path " + current_path)
			else if typeof(createResult) == "string" then
				print("[LOCAL] " + createResult)
			end if
		end if
	end if

	if not useApt then codesFile = get_shell.host_computer.File(current_path + "/" + codesFileName)
	if useApt then codesFile = serverShell.host_computer.File(codesPath + "/" + codesFileName)

	if codesFile == null then exit("codes.txt doesnt exist at path: " + codesPath) //ONLY FOR DEBUG REASONS.. SHOULD ALREADY BE CREATED IF NOT EXISTING

	codeCont = codesFile.get_content.split(":")

	for line in codeCont
		if line == "" then break
		le = line.split(" ")
		if le[0] + " " + le[1] != typeOfCode then continue
		memory = line[line.indexOf("[") : line.indexOf(":")]
		memory = memory.split("""")
		break
	end for

	if memory == null then
		memory = metaxploit.scan(metaLib)
		toWriteMem = " " + memory

		if useApt then serverShell.host_computer.File(codesPath + "/" + codesFileName).set_content(serverShell.host_computer.File(codesPath + "/" + codesFileName).get_content + typeOfCode + toWriteMem + ":")
		if not useApt then get_shell.host_computer.File(current_path + "/" + codesFileName).set_content(get_shell.host_computer.File(current_path + "/" + codesFileName).get_content + typeOfCode + toWriteMem + ":")	
	end if

	return [memory, metaLib]
end function

choseSmth = function(listOfVariables = ["option 1"], descriptionText = "No description set", removeInt = 0, isForChoosing = true)
	markPrefix = "<mark=#D1D1D143>"
	infoPrefix = "<color=#FF0000df>"
	num = 0
	if removeInt > 0 then listOfVariables.remove(removeInt - 1)
	while (true)
		clear_screen
		if not isForChoosing then 
			print (infoPrefix + descriptionText)
			return wait(2)
		end if
		if isForChoosing then print (descriptionText)
		counter = 0

		for variables in listOfVariables
			if counter == num then print(markPrefix + variables)
			if counter != num then print(variables)
			counter = counter + 1
		end for

		key = user_input("Press Up or Down arrow Key", false, true)

		if (key == "DownArrow") or (key == "s") then 
			num = num + 1
			if num > listOfVariables.len - 1 then num = 0
		else if (key == "UpArrow") or (key == "w") then 
			num = num - 1
			if num < 0 then num = listOfVariables.len - 1
		else
			print("\nYou chose: " + (num + 1))
			return num
		end if
	end while
end function

optionForRouter = function()
	net_session = metaxploit.net_use( address )
	if not net_session then exit("Error: can't connect to net session")
	service_info = "Kernel " + get_router.kernel_version

	typeOfCode = service_info
	values = getMemCodes(typeOfCode, net_session)
	memory = values[0]
	metaLib = values[1]

	option = choseSmth(["1: getPasswords", "2: getMails" ,"3: getAccsess"], "Choose a Option:")

	if option == 0 then getPasswords(false, memory, metaLib)
	if option == 1 then getMails(memory, metaLib)
	if option == 2 then getAccsess(memory, metaLib)
end function

optionForPorts = function()
	info = ""
	infoText = "PORT STATE SERVICE VERSION LAN"   
	print("\nStarting test v1.1 at " + current_date)
	print("Interesting ports on " + params[0] + "\n")
	if(ports.len == 0) then exit("Scan finished. No open ports.")

	pr = []
	infoPr = []
	portIndex = 1
	for port in ports
	service_info = router.port_info(port)
	infoPr.push(service_info)
	lan_ips = port.get_lan_ip
	port_status = "open"

	if(port.is_closed and not isLanIp) then
		port_status = "closed"
	end if
	info = info + "\n" + portIndex + " " + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
	pr.push(port.port_number)
	portIndex = portIndex + 1
	end for

	option = choseSmth(format_columns(info).split("\n"), infoText, 1) //Selecting

	port = pr[option]
	net_session = metaxploit.net_use(address, port)

	if not net_session then
		exit("Error: can't connect to net session")
	end if

	service_info = infoPr[option]

	typeOfCode = service_info
	values = getMemCodes(typeOfCode, net_session)
	memory = values[0]
	metaLib = values[1]

	option = choseSmth(["1: getPasswords", "2: getMails" ,"3: getAccsess"], "Choose a Option:")

	if option == 0 then getPasswords(false, memory, metaLib)
	if option == 1 then getMails(memory, metaLib)
	if option == 2 then getAccsess(memory, metaLib)
end function

getPasswords = function(getRoot = false, memory, metaLib)
shell = null
pass = null
passwords = []

for mem in memory
	address = metaxploit.scan_address(metaLib, mem).split("Unsafe check: ")

	for add in address
		if add == address[0] then continue
		value = add[add.indexOf("<b>") + 3 : add.indexOf("</b>")]
		value = value.replace("\n", "")
		result = metaLib.overflow(mem, value, "haha")

		if typeof(result) != "shell" and typeof(result) != "computer" then continue
		if typeof(result) == "shell" then shell = result
		if typeof(result) == "shell" then comp = result.host_computer
		if typeof(result) == "computer" then comp = result

		file = comp.File("/etc/passwd")
		if not file then continue
		cont = file.get_content
		if not cont then continue
		pass = cont.split("\n")
		for obj in pass
			passwords.push(pass)
		end for
	end for
end for

num = 1
users = []
output = []
testBool = false
for obj in passwords
	for i in obj
		for user in users
			if user == i then testBool = true
		end for

		if testBool then
			testBool = false
			continue
		end if

		// if i.split(":")[0] == "root" then
		// 	print("Password of root is: ")
		// 	exit(get_shell.launch(current_path + "/decipher", i))
		// end if

		users.push(i)
		if i != "" then output.push(num + ": " + i)
		num = num + 1
	end for
end for

if users.len < 1 and not getRoot then
	choseSmth([], "Passwords couldnt get collected", 0, false) //Didnt work

	optionPortsOrRouter = choseSmth(["1: Ports", "2: Router"], "Select:") //Selecting

	service_info = null

	if optionPortsOrRouter == 1 then optionForRouter()
	if optionPortsOrRouter == 0 then optionForPorts()
else 
	clear_screen()
	print("Root password couldnt get collected")
	return
end if

if getRoot then 
	option = 0
else
	option = choseSmth(output, "Select a user: ") //Selecting
end if

print("\nUser: " + users[option].split(":")[0])
if get_shell.launch(current_path + "/decipher", users[option]) != 1 then 
	
	choseSmth([], "No decipher found in path: " + current_path + "/decipher", 0, false) //Didnt work

	optionPortsOrRouter = choseSmth(["1: Ports", "2: Router"], "Select:") //Selecting

	service_info = null

	if optionPortsOrRouter == 1 then optionForRouter()
	if optionPortsOrRouter == 0 then optionForPorts()
end if
end function

getMails = function(memory, metaLib)
shell = null
pass = null
passwords = []

for mem in memory
	address = metaxploit.scan_address(metaLib, mem).split("Unsafe check: ")

	for add in address
		if add == address[0] then continue
		value = add[add.indexOf("<b>") + 3 : add.indexOf("</b>")]
		value = value.replace("\n", "")
		result = metaLib.overflow(mem, value, "haha")
		
		if typeof(result) != "shell" and typeof(result) != "computer" then continue
		if typeof(result) == "shell" then shell = result
		if typeof(result) == "shell" then comp = result.host_computer
		if typeof(result) == "computer" then comp = result

		
		
		homeDir = comp.File("/home")
    	if homeDir and homeDir.get_folders then 
		userFolders = homeDir.get_folders()       
        for userFolder in userFolders
            mailcodesPath = userFolder.path + "/Config/Mail.txt"
            mailFile = comp.File(mailcodesPath)
			if not mailFile then continue
			cont = mailFile.get_content
			if not cont then continue

			passwords.push(cont)
		end for
		end if
	end for
end for


num = 1
users = []
output = []
testBool = false
for i in passwords

	for user in users
		if user == i then testBool = true
	end for

	if testBool then
		testBool = false
		continue
	end if

	users.push(i)
	output.push(num + ": " + i)
	num = num + 1
end for



if passwords.len < 1 then
	choseSmth([], "Emails couldnt get collected", 0, false) //Didnt work

	optionPortsOrRouter = choseSmth(["1: Ports", "2: Router"], "Select:") //Selecting

	service_info = null

	if optionPortsOrRouter == 1 then optionForRouter()
	if optionPortsOrRouter == 0 then optionForPorts()
end if

option = choseSmth(output, "Select a user: ") //Selecting


print("\nUser: " + users[option].split(":")[0])
if get_shell.launch(current_path + "/decipher", passwords[option]) != 1 then

	choseSmth([], "No decipher found in path: " + current_path + "/decipher", 0, false) //Didnt work

	optionPortsOrRouter = choseSmth(["1: Ports", "2: Router"], "Select:") //Selecting

	service_info = null

	if optionPortsOrRouter == 1 then optionForRouter()
	if optionPortsOrRouter == 0 then optionForPorts()
end if
end function

getAccsess = function(memory, metaLib)
shell = null
pass = null

for mem in memory
	address = metaxploit.scan_address(metaLib, mem).split("Unsafe check: ")

	for add in address
		
		if add == address[0] then continue
		value = add[add.indexOf("<b>") + 3 : add.indexOf("</b>")]
		value = value.replace("\n", "")
		result = metaLib.overflow(mem, value, "haha")
		
		if typeof(result) != "shell" then continue
		if typeof(result) == "shell" then shell = result
		if shell then 
			if shell.launch("/bin/whoami") != "root" then
				option = choseSmth(["1: Yes", "2: No"], "Do you want to try get the root passwd?")
				if option == 0 then getPasswords(true)
			end if
			shell.start_terminal
		end if

	end for
end for

	choseSmth([], "The exploit failed to gain accsess", 0, false) //Didnt work

	optionPortsOrRouter = choseSmth(["1: Ports", "2: Router"], "Select:") //Selecting

	service_info = null

	if optionPortsOrRouter == 1 then optionForRouter()
	if optionPortsOrRouter == 0 then optionForPorts()
end function

address = params[0]
isLanIp = is_lan_ip( address )

if isLanIp then
   router = get_router;
else
   router = get_router( address )
end if

if router == null then exit("nmap: ip address not found")
ports = null

if not isLanIp then
   ports = router.used_ports
else
   ports = router.device_ports(address)
end if

if ports == null then exit("nmap: ip address not found")
if typeof(ports) == "string" then exit(ports)


optionPortsOrRouter = choseSmth(["1: Ports", "2: Router"], "Select:") //Selecting

service_info = null

if optionPortsOrRouter == 1 then optionForRouter()

if optionPortsOrRouter == 0 then optionForPorts()